import matplotlib.pyplot as plt
import matplotlib.dates as md


def exploit_donne(Id, time, type_prise, results, nom): # Exploitation des données pour en faire un beau graphique
    t_1, t_2, t_3, t_4, t_5, val_1, val_2, val_3, val_4, val_5 = [], [], [], [], [], [], [], [], [], []
    for i in range(len(results)):
        if results[i][0] == 1:
            t_1.append(results[i][1])
            val_1.append(results[i][2])
        elif results[i][0] == 2:
            t_2.append(results[i][1])
            val_2.append(results[i][2])
        elif results[i][0] == 3:
            t_3.append(results[i][1])
            val_3.append(results[i][2])
        elif results[i][0] == 4:
            t_4.append(results[i][1])
            val_4.append(results[i][2])
        elif results[i][0] == 5:
            t_5.append(results[i][1])
            val_5.append(results[i][2])
    plt.figure("controle_patient.exe__"+str(time))
    plt.title(u"Controle du patient '" + str(nom) + "' sur une durée de " + str(time) + "H")
    plt.subplots_adjust(bottom=0.21)
    plt.xticks( rotation= 80 )
    ax=plt.gca()
    xfmt = md.DateFormatter('%d %H:%M:%S')
    ax.xaxis.set_major_formatter(xfmt)
    legende = []
    if len(t_1) != 0:
        plt.plot(t_1, val_1, "g+-")
        legende.append("Poux")
    if len(t_2) != 0:
        plt.plot(t_2, val_2, "r+-")
        legende.append("Tension diastolique")
    if len(t_3) != 0:
        plt.plot(t_3, val_3, "m+-")
        legende.append("Tension systolique")
    if len(t_4) != 0:
        plt.plot(t_4, val_4, "y+-")
        legende.append("SpO2")
    if len(t_5) != 0:
        plt.plot(t_5, val_5, "b+-")
        legende.append("Température")
    if len(legende) == 5:
        plt.legend((legende[0], legende[1], legende[2], legende[3], legende[4]))
    elif len(legende) == 4:
        plt.legend((legende[0], legende[1], legende[2], legende[3]))
    elif len(legende) == 3:
        plt.legend((legende[0], legende[1], legende[2]))
    elif len(legende) == 2:
        plt.legend((legende[0], legends[1]))
    else:
        plt.ylabel(legende[0])
    
    plt.show(block=False)
    return True
